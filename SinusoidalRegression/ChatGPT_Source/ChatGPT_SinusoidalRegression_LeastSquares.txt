#include <iostream>
#include <cmath>
#include <algorithm>
#include <numeric>
#include <vector>

using namespace std;

// Function to calculate the predicted value using the model
double predict(double x, double a, double b, double c, double d) {
    return a * sin(b * x + c) + d;
}

// Function to calculate the sum of squares error
double calcError(vector<pair<double, double>> data, double a, double b, double c, double d) {
    double error = 0.0;
    for (auto [x, y] : data) {
        error += pow(y - predict(x, a, b, c, d), 2);
    }
    return error;
}

int main() {
    vector<pair<double, double>> data = {{1, 2}, {2, 3}, {3, 2}, {4, 1}, {5, 0}};
    double a = 1.0, b = 0.1, c = 0.0, d = 0.0;
    double error = calcError(data, a, b, c, d);

    double learning_rate = 0.1;
    int max_iterations = 1000;
    for (int i = 0; i < max_iterations; i++) {
        //calculate gradient for each parameter
        double grad_a = 0.0, grad_b = 0.0, grad_c = 0.0, grad_d = 0.0;
        for (auto [x, y] : data) {
            grad_a += -2 * (y - predict(x, a, b, c, d)) * sin(b * x + c);
            grad_b += -2 * (y - predict(x, a, b, c, d)) * a * x * cos(b * x + c);
            grad_c += -2 * (y - predict(x, a, b, c, d)) * a * cos(b * x + c);
            grad_d += -2 * (y - predict(x, a, b, c, d));
        }
        //update parameter with gradient
        a -= learning_rate * grad_a;
        b -= learning_rate * grad_b;
        c -= learning_rate * grad_c;
        d -= learning_rate * grad_d;

        double new_error = calcError(data, a, b, c, d);
        // check if error is decreasing
        if (abs(error - new_error) < 1e-6) {
            break;
        }
        error = new_error;
    }
    cout << "a: " << a << endl;
    cout << "b: " << b << endl;
    cout << "c: " << c << endl;
    cout << "d: " << d << endl;
    return 0;
}
